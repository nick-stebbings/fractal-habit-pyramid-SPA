# frozen_string_literal: true

# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
ENV['APP_ENV'] = 'test'
require_relative '../system/boot'

SPEC_ROOT = File.join(APP_ROOT, 'spec')
Dir.glob(File.join(SPEC_ROOT, 'support', 'db', '*.rb')).sort.each { |file| require file }

# Require test libraries
require 'rspec'
require 'json_spec'
require 'rack/test'
require 'database_cleaner'
# require 'capybara/rspec'
# require 'capybara/dsl'

RSpec.configure do |config|
  config.include Rack::Test::Methods
  config.include Test::DatabaseHelpers
  config.include JsonSpec::Helpers
  config.include Hht::Import['repos.domain_repo']
  config.include Hht::Import['repos.habit_node_repo']
  Faker::Config.random = Random.new(42)

  config.backtrace_exclusion_patterns = [
    /\/lib\d*\/ruby\//,
    /bin\//,
    /gems/,
    /spec\/spec_helper\.rb/,
    /lib\/rspec\/(core|expectations|matchers|mocks)/
  ]

  config.expect_with :rspec do |expectations|
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  config.mock_with :rspec do |mocks|
    mocks.verify_partial_doubles = true
  end

  config.shared_context_metadata_behavior = :apply_to_host_groups

  config.before(:suite) do
    DatabaseCleaner.strategy = :transaction
    DatabaseCleaner.clean_with(:truncation)
  end

  config.around(:each) do |example|
    DatabaseCleaner.cleaning do
      example.run
    end
  end
end

RSpec::Matchers.define(:return_success_monad) do
  match do |transaction|
    transaction.is_a?(Test::DatabaseHelpers.success)
  end
end

RSpec::Matchers.define(:return_failure_monad) do
  match do |transaction|
    transaction.is_a?(Test::DatabaseHelpers.failure)
  end
end
